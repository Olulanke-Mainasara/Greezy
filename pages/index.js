import Head from "next/head";

import ErrorOccurred from "@/components/Feedback/ErrorOccurred";
import GeoNotActive from "@/components/Feedback/GeoNotActive";
import GettingWeatherInfo from "@/components/Feedback/GettingWeatherInfo";
import LocationNeeded from "@/components/Feedback/LocationNeeded";
import DayForecast from "@/components/Main/DayForecast";
import Main from "@/components/Main/Main";
import Nav from "@/components/Nav";
import Splash from "@/components/Splash-Screen/Splash";
import getWeatherInfo from "@/utils/getWeatherInfo";
import { useEffect, useState } from "react";
import { useQuery } from "react-query";
import { useQueryClient } from "react-query";
import { useLocalStorage, useSessionStorage } from "react-use";

export default function Home() {
  const [supported, setSupported] = useState(true);
  const [loading, setLoading] = useState(null);
  const [error, setError] = useState(null);
  const [location, setLocation] = useState(null);
  const [confirmed, setConfirmed] = useLocalStorage("confirmed");
  const [splashed, setSplashed] = useSessionStorage("splashed");
  const [askUser, setAskUser] = useState(null);
  const queryClient = useQueryClient();
  const weatherInfo = queryClient.getQueryData("weatherInfo");

  const handleLocationClick = () => {
    setConfirmed("true");
  };

  useEffect(() => {
    const timeoutId = setTimeout(() => setSplashed("true"), 5500);

    if (!navigator.geolocation) {
      setSupported(false);
    }

    setAskUser(true);

    if (confirmed === "true") {
      if (!weatherInfo) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            setLocation(position.coords);
          },
          (error) => {
            setSupported(false);
          }
        );
      }

      setAskUser(false);
    }

    window.addEventListener("beforeunload", () => {
      setSplashed("");
    });

    return () => {
      clearTimeout(timeoutId);
      window.removeEventListener("beforeunload", () => {
        setSplashed("");
      });
    };
  }, [confirmed, setSplashed, weatherInfo]);

  const { isError, isLoading, data } = useQuery(
    "weatherInfo",
    () => getWeatherInfo(location),
    {
      enabled: !!location,
      staleTime: 300000,
    }
  );

  if (isLoading) {
    if (loading === null) {
      setLoading(true);
    }
  }

  if (isError) {
    if (error === null) {
      setError(true);
      setLoading(null);
      setLocation(null);
    }
  }

  if (data) {
    if (loading === true) {
      setLoading(false);
    }
  }

  return (
    <>
      <Head>
        <title>Greezy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className={`bg-[#262626] ${
          askUser || splashed !== "true" || loading || error || !supported
            ? "overflow-hidden h-screen"
            : ""
        }`}
      >
        <div className="flex flex-col w-full min-h-[100dvh] xl:h-screen gap-12 p-4 pt-8 xl:pt-4 xl:flex-row xl:gap-8  pb-[86px] xl:pb-4">
          <Nav />
          <Main />
          <DayForecast />
        </div>
      </main>

      {splashed !== "true" ? <Splash /> : ""}

      {!supported && <GeoNotActive />}

      {askUser && <LocationNeeded handleLocationClick={handleLocationClick} />}

      {loading && <GettingWeatherInfo />}

      {error && <ErrorOccurred />}
    </>
  );
}
