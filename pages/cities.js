import Head from "next/head";

import CityResult from "@/components/Cities/CityResult";
import DayForecast2 from "@/components/Cities/DayForecast2";
import Nav from "@/components/Nav";
import getCities from "@/utils/getCities";
import React, { useState } from "react";
import { FaSearch } from "react-icons/fa";
import Loading from "react-loading";

const Cities = () => {
  const [searchResults, setSearchResults] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(false);

  const handleKeyPress = async (e) => {
    if (e.key === "Enter") {
      e.preventDefault();
      setError(false);
      setLoading(true);

      try {
        const city = e.target.value;

        const awaitedData = await getCities(city);

        if (awaitedData.length === 0) {
          setLoading(false);
          setError(true);
          return;
        }

        setSearchResults(awaitedData);
        setLoading(false);
      } catch (error) {
        setLoading(false);
        setError(true);
      }
    }
  };

  return (
    <>
      <Head>
        <title>Cities | Greezy</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="bg-[#262626]">
        <div className="flex flex-col w-full min-h-[100dvh] xl:h-screen gap-12 p-4 xl:flex-row xl:gap-8 pb-[86px] xl:pb-4">
          <Nav />
          <section className="flex flex-col p-4 pb-5 space-y-10 border grow background rounded-3xl md:p-8 h-fit xl:h-auto">
            <div className="flex items-center w-full gap-4">
              <h1 className="text-4xl text-center text-white xl:text-7xl">
                Cities
              </h1>

              <form className="flex items-center w-full h-10 gap-2 pl-2 border rounded-lg">
                <FaSearch color="#fff" />
                <input
                  type="search"
                  className="w-full h-full text-white bg-transparent outline-none"
                  placeholder="Search for a city"
                  onKeyDown={handleKeyPress}
                ></input>
              </form>
            </div>

            {loading == false && error == false && searchResults.length == 0 ? (
              <div className="flex items-center justify-center p-8 pt-4 grow">
                <h1 className="text-3xl text-white xl:text-5xl">
                  No searches...
                </h1>
              </div>
            ) : error == true && searchResults.length == 0 ? (
              <div className="flex items-center justify-center p-8 pt-4 grow">
                <h1 className="text-3xl text-white xl:text-5xl">
                  Error locating city
                </h1>
              </div>
            ) : loading == false && searchResults.length > 0 ? (
              <div className="grid grid-cols-1 gap-10 overflow-scroll xl:gap-y-14 md:grid-cols-3 2xl:grid-cols-4 grow hideScroll">
                {searchResults.map((result) => (
                  <CityResult key={Math.random() * 10000} result={result} />
                ))}
              </div>
            ) : (
              <div className="flex items-center justify-center p-8 pt-4 grow">
                <h1 className="flex items-center justify-center gap-2 text-3xl text-white xl:text-5xl">
                  Locating
                  <Loading
                    type="spinningBubbles"
                    color="#fff"
                    height={50}
                    width={50}
                  />
                </h1>
              </div>
            )}
          </section>

          <DayForecast2 />
        </div>
      </main>
    </>
  );
};

export default Cities;
